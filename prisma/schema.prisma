// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctorProfile  Doctor?
  patientProfile Patient?
  adminProfile   Admin?
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model Doctor {
  id             String        @id @default(cuid())
  userId         String        @unique
  specialization String?
  education      String?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Patient {
  id             String          @id @default(cuid())
  userId         String          @unique
  dateOfBirth    DateTime?
  gender         String?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id            String            @id @default(cuid())
  doctorId      String
  patientId     String?
  startTime     DateTime
  endTime       DateTime
  title         String?
  symptoms      String?
  status        AppointmentStatus @default(FREE)
  medicalRecord MedicalRecord?
  doctor        Doctor            @relation(fields: [doctorId], references: [id])
  patient       Patient?          @relation(fields: [patientId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum AppointmentStatus {
  FREE
  BOOKED
  OCCUPIED
}

model MedicalRecord {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  patientId     String
  doctorNotes   String?
  patient       Patient     @relation(fields: [patientId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}